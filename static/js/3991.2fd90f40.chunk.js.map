{"version":3,"file":"static/js/3991.2fd90f40.chunk.js","mappings":"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","sources":["pages/chat/index11.js","../node_modules/@mui/icons-material/Send.js","../node_modules/@mui/material/TextField/textFieldClasses.js","../node_modules/@mui/material/TextField/TextField.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport SendIcon from '@mui/icons-material/Send';\nimport './Chat.css'\n// const classes = createTheme((theme) => ({\n//   root: {\n//     height: '100vh',\n//   },\n//   paper: {\n//     margin: theme.spacing(4, 2),\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//   },\n//   avatar: {\n//     backgroundColor: theme.palette.secondary.main,\n//   },\n//   form: {\n//     width: '100%',\n//     marginTop: theme.spacing(3),\n//   },\n//   chatBox: {\n//     height: '60vh',\n//     overflowY: 'scroll',\n//     marginBottom: theme.spacing(2),\n//   },\n// }));\n\nconst Chat = () => {\n  \n  const [message, setMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([{ user: 'John', message:\"hi\" }]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (message) {\n      setChatHistory([...chatHistory, { user: 'me', message }]);\n      setMessage('');\n    }\n  };\n\n  return (\n    <Grid container component=\"main\" className=\"root\">\n      <Grid item xs={12} sm={12} md={12} component={Paper} elevation={6} square>\n        <div className=\"paper\">\n          <Avatar className=\"avatar\">\n            <SendIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Chat\n          </Typography>\n          <div className=\"chatBox\">\n            {chatHistory.map((chat, index) => (\n              <div key={index}>\n                {chat.user === 'me' ? 'Me: ' : 'Other: '}\n                {chat.message}\n              </div>\n            ))}\n          </div>\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <Grid container spacing={3}>\n              <Grid item xs={9}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"message\"\n                  label=\"Message\"\n                  name=\"message\"\n                  value={message}\n                  onChange={(event) => setMessage(event.target.value)}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className=\"submit\"\n                  endIcon={<SendIcon />}\n                >\n                  Send\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Chat;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\nexports.default = _default;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getTextFieldUtilityClass(slot) {\n  return generateUtilityClass('MuiTextField', slot);\n}\nconst textFieldClasses = generateUtilityClasses('MuiTextField', ['root']);\nexport default textFieldClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoComplete\", \"autoFocus\", \"children\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"maxRows\", \"minRows\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { refType, unstable_useId as useId } from '@mui/utils';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport { getTextFieldUtilityClass } from './textFieldClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTextFieldUtilityClass, classes);\n};\nconst TextFieldRoot = styled(FormControl, {\n  name: 'MuiTextField',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/material-ui/api/form-control/)\n * - [InputLabel](/material-ui/api/input-label/)\n * - [FilledInput](/material-ui/api/filled-input/)\n * - [OutlinedInput](/material-ui/api/outlined-input/)\n * - [Input](/material-ui/api/input/)\n * - [FormHelperText](/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\nconst TextField = /*#__PURE__*/React.forwardRef(function TextField(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTextField'\n  });\n  const {\n      autoComplete,\n      autoFocus = false,\n      children,\n      className,\n      color = 'primary',\n      defaultValue,\n      disabled = false,\n      error = false,\n      FormHelperTextProps,\n      fullWidth = false,\n      helperText,\n      id: idOverride,\n      InputLabelProps,\n      inputProps,\n      InputProps,\n      inputRef,\n      label,\n      maxRows,\n      minRows,\n      multiline = false,\n      name,\n      onBlur,\n      onChange,\n      onFocus,\n      placeholder,\n      required = false,\n      rows,\n      select = false,\n      SelectProps,\n      type,\n      value,\n      variant = 'outlined'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    autoFocus,\n    color,\n    disabled,\n    error,\n    fullWidth,\n    multiline,\n    required,\n    select,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n  const InputMore = {};\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n    InputMore.label = label;\n  }\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n    InputMore['aria-describedby'] = undefined;\n  }\n  const id = useId(idOverride);\n  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;\n  const inputLabelId = label && id ? `${id}-label` : undefined;\n  const InputComponent = variantComponent[variant];\n  const InputElement = /*#__PURE__*/_jsx(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    maxRows: maxRows,\n    minRows: minRows,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return /*#__PURE__*/_jsxs(TextFieldRoot, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    error: error,\n    fullWidth: fullWidth,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant,\n    ownerState: ownerState\n  }, other, {\n    children: [label != null && label !== '' && /*#__PURE__*/_jsx(InputLabel, _extends({\n      htmlFor: id,\n      id: inputLabelId\n    }, InputLabelProps, {\n      children: label\n    })), select ? /*#__PURE__*/_jsx(Select, _extends({\n      \"aria-describedby\": helperTextId,\n      id: id,\n      labelId: inputLabelId,\n      value: value,\n      input: InputElement\n    }, SelectProps, {\n      children: children\n    })) : InputElement, helperText && /*#__PURE__*/_jsx(FormHelperText, _extends({\n      id: helperTextId\n    }, FormHelperTextProps, {\n      children: helperText\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps: PropTypes.object,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select: PropTypes.bool,\n  /**\n   * Props applied to the [`Select`](/material-ui/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n  /**\n   * The size of the component.\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default TextField;"],"names":["useState","message","setMessage","user","chatHistory","setChatHistory","Grid","container","component","className","item","xs","sm","md","Paper","elevation","square","Avatar","Send","Typography","variant","map","chat","index","onSubmit","event","preventDefault","spacing","TextField","required","fullWidth","id","label","name","value","onChange","target","Button","type","color","endIcon","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","getTextFieldUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","variantComponent","standard","Input","filled","FilledInput","outlined","OutlinedInput","TextFieldRoot","styled","FormControl","overridesResolver","props","styles","root","React","inProps","ref","useThemeProps","autoComplete","autoFocus","children","defaultValue","disabled","error","FormHelperTextProps","helperText","idOverride","InputLabelProps","inputProps","InputProps","inputRef","maxRows","minRows","multiline","onBlur","onFocus","placeholder","rows","select","SelectProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","InputMore","shrink","notched","native","undefined","useId","helperTextId","inputLabelId","InputComponent","InputElement","_jsx","_jsxs","clsx","InputLabel","htmlFor","Select","labelId","input","FormHelperText"],"sourceRoot":""}